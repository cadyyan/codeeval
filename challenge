#!/usr/bin/env python

# pylint: disable=C0111

import argparse
import cookielib
import glob
import os
import os.path
import shutil
import urllib
import urllib2

CODEEVAL_URL = 'https://www.codeeval.com'

def setup_args_parser():
	"""
	Setup argument parser.
	"""

	parser = argparse.ArgumentParser(
			description = 'Create solution files for each language for a challenge')
	subparsers = parser.add_subparsers()

	create_parser = subparsers.add_parser('create')
	create_parser.add_argument('challenge_id', type = int,
						help = 'Challenge ID')
	create_parser.add_argument('challenge_name', type = str,
						help = 'Challenge name')
	create_parser.set_defaults(func = create_challenge)

	login_parser = subparsers.add_parser('login')
	login_parser.add_argument('username', type = str)
	login_parser.add_argument('password', type = str)
	login_parser.set_defaults(func = login)

	return parser.parse_args()

def create_challenge(args):
	"""
	Create challenge files
	"""

	challenge_name = args.challenge_name.lower().replace(' ', '_')
	filename_root  = '{0}_{1}'.format(args.challenge_id, challenge_name)

	for lang in os.listdir('.'):
		if not os.path.isdir(lang) or lang.startswith('.'):
			continue

		template_match = glob.glob(os.path.join(lang, 'template.*'))
		if len(template_match) == 0:
			continue

		template = template_match[0]
		filename = os.path.join(lang, filename_root) + os.path.splitext(template)[1]

		if os.path.exists(filename):
			print 'Skipping {0}...'.format(filename)
		else:
			print 'Creating {0}...'.format(filename)

			shutil.copyfile(template, filename)

def login(args):
	"""
	Handle logging into CodeEval
	"""

	cookie     = 'codeeval.cookie'
	policy     = cookielib.DefaultCookiePolicy(allowed_domains = ['www.codeeval.com'])
	cookie_jar = cookielib.LWPCookieJar(cookie, policy = policy)
	opener     = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
	data       = {
		'username': args.username,
		'password': args.password,
		'email_not_activated': 'email',
		'next': '',
	}

	if os.path.exists(cookie):
		cookie_jar.load()

	opener.open(CODEEVAL_URL + '/accounts/login', urllib.urlencode(data))
	cookie_jar.save()

def main():
	"""
	Main function
	"""

	args = setup_args_parser()
	args.func(args)

if __name__ == '__main__':
	main()

